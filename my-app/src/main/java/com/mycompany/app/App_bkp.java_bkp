package com.mycompany.app;

import java.io.*;
// import java.lang.module.ModuleDescriptor.Modifier;
import java.lang.reflect.Modifier;
import java.util.*;

import com.google.gson.Gson; 
import com.google.gson.GsonBuilder; 

import com.mycompany.app.CreateDSLObjects;
import com.mycompany.dsl.FeatureExtractor;
import com.mycompany.dsl.SemTypePrediction;
import com.mycompany.dsl.DSL_main;
import com.mycompany.dsl.ColumnBasedTable;

// import java.lang.System.Logger;
// import java.lang.*;

/**
 * Hello world!
 * 
 * mvn clean install
 * mvn exec:java -Dexec.mainClass="com.mycompany.app.App"
 *
 */
public class App 
{

    public static void main( String[] args ) throws Exception{
        System.out.println( "Hello World!" );
        String dirPath = "/Users/rutujarane/Desktop/ISI/Semantics/dsl_copy/dsl/data/";
        String modelFile = "model_fileexe";
        System.out.println("Print Arguments:"+dirPath+" "+modelFile);

        File maindir = new File(dirPath);
        // File listOfFiles[];
        if(maindir.exists() && maindir.isDirectory()){
            File listOfFileFolders[] = maindir.listFiles();
            System.out.println("folderList:");
            List<File> listOfFiles = new ArrayList<File>();
            for(int i=0; i<listOfFileFolders.length; i++){
                System.out.println(listOfFileFolders[i].getAbsolutePath());
                if(listOfFileFolders[i].exists() && listOfFileFolders[i].isDirectory()){
                    File listOfSubFiles[] = listOfFileFolders[i].listFiles();
                    for(int j=0; j<listOfSubFiles.length; j++){
                        listOfFiles.add(listOfSubFiles[j]);
                    }
                }
            }
            String fileList[] = new String[listOfFiles.size()];
            for(int i=0; i<listOfFiles.size(); i++){
                fileList[i] = listOfFiles.get(i).getAbsolutePath();
                System.out.println(fileList[i]);
                System.out.println(listOfFiles.get(i));
            }

            int count=0;
            for(int fileNum=0; fileNum<fileList.length; fileNum++){

                //Read the csv file
                System.out.println("Reading: "+fileList[fileNum]);
                String[][] data = CreateDSLObjects.readFile(fileList[fileNum]);

                //Delete the modelFile if it exists
                CreateDSLObjects.deleteFile(modelFile);

                String fileListTrain[] = new String[fileList.length-1];;
                System.arraycopy(fileList, 0, fileListTrain, 0, fileNum);
                System.out.println(fileList.length);
                System.arraycopy(fileList, fileNum + 1, fileListTrain, fileNum, fileList.length - fileNum - 1);
                System.out.println("FileNum: "+fileNum+"FileList: "+fileList.length+" FileListTrain: "+fileListTrain.length);
                System.out.println("FileListTrain: ");
                for(int i=0; i<fileListTrain.length; i++){
                    System.out.println(fileListTrain[i]);
                }
                FeatureExtractor featureExtractorObject = CreateDSLObjects.create_feature_extractor(fileListTrain);
                System.out.println("Created FeatureExtractorObject");

                DSL_main dsl_obj = new DSL_main("/Users/rutujarane/Desktop/ISI/Semantics/dsl/"+modelFile,featureExtractorObject,true,true,false);

                System.out.println("Writing object to file");
                GsonBuilder builder = new GsonBuilder().serializeSpecialFloatingPointValues();  // STATIC|TRANSIENT in the default configuration
                builder.setPrettyPrinting(); 
                Gson gson = builder.create(); 
                String jsonString = gson.toJson(dsl_obj); 
                FileWriter fw = new FileWriter("dslobject");
                fw.write(jsonString);
                fw.close();
                // FileOutputStream fos = new FileOutputStream("dslobject");
                // ObjectOutputStream oos = new ObjectOutputStream(fos);
                // oos.writeObject(dsl_obj);
                // oos.close();
                System.out.println("Successfully Wrote object to file");

                System.out.println("Reading object from file");
                // FileReader fr = new FileReader("dslobject");
                // String jsonStringFromFile = fr.read();
                // fr.close();
                DSL_main dsl_obj1 = gson.fromJson(jsonString, DSL_main.class); 
                // FileInputStream fileIS = new FileInputStream("dslobject");
                // ObjectInputStream file = new ObjectInputStream(fileIS);
                // DSL_main dsl_obj1 = (DSL_main) (file).readObject();
                System.out.println("Successfully read object from file");

                System.out.println("Test FileName:"+fileList[fileNum]);
                count++;
                ColumnBasedTable column_based_table_obj_pred = CreateDSLObjects.findDatatype(data,fileList[fileNum]); //For test table
                double total_inverse_rank = 0; //For each fold
                FileWriter myWriterr = new FileWriter("error_data.txt");
                myWriterr.write("Start!!!!!!\n");
                double ranks[] = new double[column_based_table_obj_pred.columns.size()];
                for(int col=0; col<column_based_table_obj_pred.columns.size(); col++){
                    List<SemTypePrediction> predictions = new ArrayList<SemTypePrediction>();
                    predictions = dsl_obj1.predictSemanticType(column_based_table_obj_pred.columns.get(col),100);

                    String column_type[] = data[1][col].split("-");
                    System.out.println("Column_type="+column_type[0]+" "+column_type[column_type.length-1]);
                    String classID = column_type[0];
                    String predicate = column_type[column_type.length-1];

                    double rank = 1;
                    System.out.println("Actual:"+classID+" "+predicate);
                    myWriterr.write("\n\nActual:"+classID+" "+predicate+"\n");
                    if("hi".equals("hi"))
                        System.out.println("HIIIII .equals");
                    if("bye" == "bye")
                        System.out.println("Byeeeee ==");
                    for(int pred_ind=0; pred_ind<predictions.size(); pred_ind++){
                        System.out.println("Prediction:"+predictions.get(pred_ind).sem_type.classID+" "+predictions.get(pred_ind).sem_type.predicate+" "+predictions.get(pred_ind).prob);
                        myWriterr.write("Prediction:"+predictions.get(pred_ind).sem_type.classID+" "+predictions.get(pred_ind).sem_type.predicate+" "+predictions.get(pred_ind).prob+"\n");
                        if(predictions.get(pred_ind).sem_type.classID.equals(classID) && predictions.get(pred_ind).sem_type.predicate.equals(predicate)){
                            total_inverse_rank += (1/rank);
                            break;
                        }
                        else
                            rank += 1;
                    }
                    ranks[col] = rank;
                    System.out.println("Rank of this prediction:"+rank);
                }
                myWriterr.write("End");
                myWriterr.close();
                for(int kkk=0; kkk<ranks.length; kkk++)
                    System.out.println("Rank:"+ranks[kkk]);
                double mean_reciprocal_rank = total_inverse_rank / (double)column_based_table_obj_pred.columns.size();
                System.out.println("DONE with "+fileNum+1+" FOLD(s)");
                System.out.println("MEAN RECIPROCAL RANK = "+mean_reciprocal_rank+" total="+total_inverse_rank+" columnL"+column_based_table_obj_pred.columns.size());
                break;
            }

        System.out.println("END!!!");
        System.out.println(count+"/"+fileList.length+" Folds done");
    
        }
        else{
            System.out.println("Error: Directory not found!");
        }
    }
}
